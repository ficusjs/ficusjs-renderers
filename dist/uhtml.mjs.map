{"version":3,"file":"uhtml.mjs","sources":["../node_modules/@webreflection/mapset/esm/index.js","../node_modules/@webreflection/uparser/esm/index.js","../node_modules/@webreflection/uwire/esm/index.js","../node_modules/uarray/esm/index.js","../node_modules/uhandlers/esm/index.js","../node_modules/uhtml/esm/utils.js","../node_modules/uhtml/esm/handlers.js","../node_modules/udomdiff/esm/index.js","../node_modules/uhtml/esm/rabbit.js","../node_modules/uhtml/esm/index.js","../src/uhtml.mjs"],"sourcesContent":["export class MapSet extends Map {\n  set(key, value) {\n    super.set(key, value);\n    return value;\n  }\n}\n\nexport class WeakMapSet extends WeakMap {\n  set(key, value) {\n    super.set(key, value);\n    return value;\n  }\n}\n","/*! (c) Andrea Giammarchi - ISC */\nconst empty = /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i;\nconst elements = /<([a-z]+[a-z0-9:._-]*)([^>]*?)(\\/?)>/g;\nconst attributes = /([^\\s\\\\>\"'=]+)\\s*=\\s*(['\"]?)\\x01/g;\nconst holes = /[\\x01\\x02]/g;\n\n// \\x01 Node.ELEMENT_NODE\n// \\x02 Node.ATTRIBUTE_NODE\n\n/**\n * Given a template, find holes as both nodes and attributes and\n * return a string with holes as either comment nodes or named attributes.\n * @param {string[]} template a template literal tag array\n * @param {string} prefix prefix to use per each comment/attribute\n * @param {boolean} svg enforces self-closing tags\n * @returns {string} X/HTML with prefixed comments or attributes\n */\nexport default (template, prefix, svg) => {\n  let i = 0;\n  return template\n          .join('\\x01')\n          .trim()\n          .replace(\n            elements,\n            (_, name, attrs, selfClosing) => {\n              let ml = name + attrs.replace(attributes, '\\x02=$2$1').trimEnd();\n              if (selfClosing.length)\n                ml += (svg || empty.test(name)) ? ' /' : ('></' + name);\n              return '<' + ml + '>';\n            }\n          )\n          .replace(\n            holes,\n            hole => hole === '\\x01' ?\n              ('<!--' + prefix + i++ + '-->') :\n              (prefix + i++)\n          );\n};\n","const ELEMENT_NODE = 1;\nconst nodeType = 111;\n\nconst remove = ({firstChild, lastChild}) => {\n  const range = document.createRange();\n  range.setStartAfter(firstChild);\n  range.setEndAfter(lastChild);\n  range.deleteContents();\n  return firstChild;\n};\n\nexport const diffable = (node, operation) => node.nodeType === nodeType ?\n  ((1 / operation) < 0 ?\n    (operation ? remove(node) : node.lastChild) :\n    (operation ? node.valueOf() : node.firstChild)) :\n  node\n;\n\nexport const persistent = fragment => {\n  const {firstChild, lastChild} = fragment;\n  if (firstChild === lastChild)\n    return lastChild || fragment;\n  const {childNodes} = fragment;\n  const nodes = [...childNodes];\n  return {\n    ELEMENT_NODE,\n    nodeType,\n    firstChild,\n    lastChild,\n    valueOf() {\n      if (childNodes.length !== nodes.length)\n        fragment.append(...nodes);\n      return fragment;\n    }\n  };\n};\n","const {isArray} = Array;\nconst {indexOf, slice} = [];\n\nexport {isArray, indexOf, slice};\n","import {isArray} from 'uarray';\n\n// flag for foreign checks (slower path, fast by default)\nlet useForeign = false;\n\nexport class Foreign {\n  constructor(handler, value) {\n    useForeign = true;\n    this._ = (...args) => handler(...args, value);\n  }\n}\n\nexport const foreign = (handler, value) => new Foreign(handler, value);\n\nexport const aria = node => values => {\n  for (const key in values) {\n    const name = key === 'role' ? key : `aria-${key}`;\n    const value = values[key];\n    if (value == null)\n      node.removeAttribute(name);\n    else\n      node.setAttribute(name, value);\n  }\n};\n\nconst getValue = value => value == null ? value : value.valueOf();\n\nexport const attribute = (node, name) => {\n  let oldValue, orphan = true;\n  const attributeNode = document.createAttributeNS(null, name);\n  return newValue => {\n    const value = useForeign && (newValue instanceof Foreign) ?\n                  newValue._(node, name) : getValue(newValue);\n    if (oldValue !== value) {\n      if ((oldValue = value) == null) {\n        if (!orphan) {\n          node.removeAttributeNode(attributeNode);\n          orphan = true;\n        }\n      }\n      else {\n        attributeNode.value = value;\n        if (orphan) {\n          node.setAttributeNodeNS(attributeNode);\n          orphan = false;\n        }\n      }\n    }\n  };\n};\n\nexport const boolean = (node, key, oldValue) => newValue => {\n  const value = !!getValue(newValue);\n  if (oldValue !== value) {\n    // when IE won't be around anymore ...\n    // node.toggleAttribute(key, oldValue = !!value);\n    if ((oldValue = value))\n      node.setAttribute(key, '');\n    else\n      node.removeAttribute(key);\n  }\n};\n\nexport const data = ({dataset}) => values => {\n  for (const key in values) {\n    const value = values[key];\n    if (value == null)\n      delete dataset[key];\n    else\n      dataset[key] = value;\n  }\n};\n\nexport const event = (node, name) => {\n  let oldValue, lower, type = name.slice(2);\n  if (!(name in node) && (lower = name.toLowerCase()) in node)\n    type = lower.slice(2);\n  return newValue => {\n    const info = isArray(newValue) ? newValue : [newValue, false];\n    if (oldValue !== info[0]) {\n      if (oldValue)\n        node.removeEventListener(type, oldValue, info[1]);\n      if (oldValue = info[0])\n        node.addEventListener(type, oldValue, info[1]);\n    }\n  };\n};\n\nexport const ref = node => {\n  let oldValue;\n  return value => {\n    if (oldValue !== value) {\n      oldValue = value;\n      if (typeof value === 'function')\n        value(node);\n      else\n        value.current = node;\n    }\n  };\n};\n\nexport const setter = (node, key) => key === 'dataset' ?\n  data(node) :\n  value => {\n    node[key] = value;\n  };\n\nexport const text = node => {\n  let oldValue;\n  return newValue => {\n    const value = getValue(newValue);\n    if (oldValue != value) {\n      oldValue = value;\n      node.textContent = value == null ? '' : value;\n    }\n  };\n};\n","const {isArray, prototype} = Array;\nconst {indexOf} = prototype;\n\nexport {isArray, indexOf};\n\nconst {\n  createDocumentFragment,\n  createElement,\n  createElementNS,\n  createTextNode,\n  createTreeWalker,\n  importNode\n} = new Proxy({}, {\n  get: (_, method) => document[method].bind(document)\n});\n\nexport {createTextNode, createTreeWalker, importNode};\n\nconst createHTML = html => {\n  const template = createElement('template');\n  template.innerHTML = html;\n  return template.content;\n};\n\nlet xml;\nconst createSVG = svg => {\n  if (!xml) xml = createElementNS('http://www.w3.org/2000/svg', 'svg');\n  xml.innerHTML = svg;\n  const content = createDocumentFragment();\n  content.append(...xml.childNodes);\n  return content;\n};\n\nexport const createContent = (text, svg) => svg ?\n                              createSVG(text) : createHTML(text);\n","import {diffable} from '@webreflection/uwire';\n\nimport {aria, attribute, boolean, event, ref, setter, text} from 'uhandlers';\nimport udomdiff from 'udomdiff';\n\nimport {isArray, createTextNode} from './utils.js';\n\n// from a generic path, retrieves the exact targeted node\nconst reducePath = ({childNodes}, i) => childNodes[i];\n\n// this helper avoid code bloat around handleAnything() callback\nconst diff = (comment, oldNodes, newNodes) => udomdiff(\n  comment.parentNode,\n  // TODO: there is a possible edge case where a node has been\n  //       removed manually, or it was a keyed one, attached\n  //       to a shared reference between renders.\n  //       In this case udomdiff might fail at removing such node\n  //       as its parent won't be the expected one.\n  //       The best way to avoid this issue is to filter oldNodes\n  //       in search of those not live, or not in the current parent\n  //       anymore, but this would require both a change to uwire,\n  //       exposing a parentNode from the firstChild, as example,\n  //       but also a filter per each diff that should exclude nodes\n  //       that are not in there, penalizing performance quite a lot.\n  //       As this has been also a potential issue with domdiff,\n  //       and both lighterhtml and hyperHTML might fail with this\n  //       very specific edge case, I might as well document this possible\n  //       \"diffing shenanigan\" and call it a day.\n  oldNodes,\n  newNodes,\n  diffable,\n  comment\n);\n\n// if an interpolation represents a comment, the whole\n// diffing will be related to such comment.\n// This helper is in charge of understanding how the new\n// content for such interpolation/hole should be updated\nconst handleAnything = comment => {\n  let oldValue, text, nodes = [];\n  const anyContent = newValue => {\n    switch (typeof newValue) {\n      // primitives are handled as text content\n      case 'string':\n      case 'number':\n      case 'boolean':\n        if (oldValue !== newValue) {\n          oldValue = newValue;\n          if (!text)\n            text = createTextNode('');\n          text.data = newValue;\n          nodes = diff(comment, nodes, [text]);\n        }\n        break;\n      // null, and undefined are used to cleanup previous content\n      case 'object':\n      case 'undefined':\n        if (newValue == null) {\n          if (oldValue != newValue) {\n            oldValue = newValue;\n            nodes = diff(comment, nodes, []);\n          }\n          break;\n        }\n        // arrays and nodes have a special treatment\n        if (isArray(newValue)) {\n          oldValue = newValue;\n          // arrays can be used to cleanup, if empty\n          if (newValue.length === 0)\n            nodes = diff(comment, nodes, []);\n          // or diffed, if these contains nodes or \"wires\"\n          else if (typeof newValue[0] === 'object')\n            nodes = diff(comment, nodes, newValue);\n          // in all other cases the content is stringified as is\n          else\n            anyContent(String(newValue));\n          break;\n        }\n        // if the new value is a DOM node, or a wire, and it's\n        // different from the one already live, then it's diffed.\n        // if the node is a fragment, it's appended once via its childNodes\n        // There is no `else` here, meaning if the content\n        // is not expected one, nothing happens, as easy as that.\n        if (oldValue !== newValue) {\n          if ('ELEMENT_NODE' in newValue) {\n            oldValue = newValue;\n            nodes = diff(\n              comment,\n              nodes,\n              newValue.nodeType === 11 ?\n                [...newValue.childNodes] :\n                [newValue]\n            );\n          }\n          else {\n            const value = newValue.valueOf();\n            if (value !== newValue)\n              anyContent(value);\n          }\n        }\n        break;\n      case 'function':\n        anyContent(newValue(comment));\n        break;\n    }\n  };\n  return anyContent;\n};\n\n// attributes can be:\n//  * ref=${...}      for hooks and other purposes\n//  * aria=${...}     for aria attributes\n//  * ?boolean=${...} for boolean attributes\n//  * .dataset=${...} for dataset related attributes\n//  * .setter=${...}  for Custom Elements setters or nodes with setters\n//                    such as buttons, details, options, select, etc\n//  * @event=${...}   to explicitly handle event listeners\n//  * onevent=${...}  to automatically handle event listeners\n//  * generic=${...}  to handle an attribute just like an attribute\nconst handleAttribute = (node, name/*, svg*/) => {\n  switch (name[0]) {\n    case '?': return boolean(node, name.slice(1), false);\n    case '.': return setter(node, name.slice(1));\n    case '@': return event(node, 'on' + name.slice(1));\n    case 'o': if (name[1] === 'n') return event(node, name);\n  }\n\n  switch (name) {\n    case 'ref': return ref(node);\n    case 'aria': return aria(node);\n  }\n\n  return attribute(node, name/*, svg*/);\n};\n\n// each mapped update carries the update type and its path\n// the type is either node, attribute, or text, while\n// the path is how to retrieve the related node to update.\n// In the attribute case, the attribute name is also carried along.\nexport function handlers(options) {\n  const {type, path} = options;\n  const node = path.reduceRight(reducePath, this);\n  return type === 'node' ?\n    handleAnything(node) :\n    (type === 'attr' ?\n      handleAttribute(node, options.name/*, options.svg*/) :\n      text(node));\n};\n","/**\n * ISC License\n *\n * Copyright (c) 2020, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\n/**\n * @param {Node} parentNode The container where children live\n * @param {Node[]} a The list of current/live children\n * @param {Node[]} b The list of future children\n * @param {(entry: Node, action: number) => Node} get\n * The callback invoked per each entry related DOM operation.\n * @param {Node} [before] The optional node used as anchor to insert before.\n * @returns {Node[]} The same list of future children.\n */\nexport default (parentNode, a, b, get, before) => {\n  const bLength = b.length;\n  let aEnd = a.length;\n  let bEnd = bLength;\n  let aStart = 0;\n  let bStart = 0;\n  let map = null;\n  while (aStart < aEnd || bStart < bEnd) {\n    // append head, tail, or nodes in between: fast path\n    if (aEnd === aStart) {\n      // we could be in a situation where the rest of nodes that\n      // need to be added are not at the end, and in such case\n      // the node to `insertBefore`, if the index is more than 0\n      // must be retrieved, otherwise it's gonna be the first item.\n      const node = bEnd < bLength ?\n        (bStart ?\n          (get(b[bStart - 1], -0).nextSibling) :\n          get(b[bEnd - bStart], 0)) :\n        before;\n      while (bStart < bEnd)\n        parentNode.insertBefore(get(b[bStart++], 1), node);\n    }\n    // remove head or tail: fast path\n    else if (bEnd === bStart) {\n      while (aStart < aEnd) {\n        // remove the node only if it's unknown or not live\n        if (!map || !map.has(a[aStart]))\n          parentNode.removeChild(get(a[aStart], -1));\n        aStart++;\n      }\n    }\n    // same node: fast path\n    else if (a[aStart] === b[bStart]) {\n      aStart++;\n      bStart++;\n    }\n    // same tail: fast path\n    else if (a[aEnd - 1] === b[bEnd - 1]) {\n      aEnd--;\n      bEnd--;\n    }\n    // The once here single last swap \"fast path\" has been removed in v1.1.0\n    // https://github.com/WebReflection/udomdiff/blob/single-final-swap/esm/index.js#L69-L85\n    // reverse swap: also fast path\n    else if (\n      a[aStart] === b[bEnd - 1] &&\n      b[bStart] === a[aEnd - 1]\n    ) {\n      // this is a \"shrink\" operation that could happen in these cases:\n      // [1, 2, 3, 4, 5]\n      // [1, 4, 3, 2, 5]\n      // or asymmetric too\n      // [1, 2, 3, 4, 5]\n      // [1, 2, 3, 5, 6, 4]\n      const node = get(a[--aEnd], -1).nextSibling;\n      parentNode.insertBefore(\n        get(b[bStart++], 1),\n        get(a[aStart++], -1).nextSibling\n      );\n      parentNode.insertBefore(get(b[--bEnd], 1), node);\n      // mark the future index as identical (yeah, it's dirty, but cheap 👍)\n      // The main reason to do this, is that when a[aEnd] will be reached,\n      // the loop will likely be on the fast path, as identical to b[bEnd].\n      // In the best case scenario, the next loop will skip the tail,\n      // but in the worst one, this node will be considered as already\n      // processed, bailing out pretty quickly from the map index check\n      a[aEnd] = b[bEnd];\n    }\n    // map based fallback, \"slow\" path\n    else {\n      // the map requires an O(bEnd - bStart) operation once\n      // to store all future nodes indexes for later purposes.\n      // In the worst case scenario, this is a full O(N) cost,\n      // and such scenario happens at least when all nodes are different,\n      // but also if both first and last items of the lists are different\n      if (!map) {\n        map = new Map;\n        let i = bStart;\n        while (i < bEnd)\n          map.set(b[i], i++);\n      }\n      // if it's a future node, hence it needs some handling\n      if (map.has(a[aStart])) {\n        // grab the index of such node, 'cause it might have been processed\n        const index = map.get(a[aStart]);\n        // if it's not already processed, look on demand for the next LCS\n        if (bStart < index && index < bEnd) {\n          let i = aStart;\n          // counts the amount of nodes that are the same in the future\n          let sequence = 1;\n          while (++i < aEnd && i < bEnd && map.get(a[i]) === (index + sequence))\n            sequence++;\n          // effort decision here: if the sequence is longer than replaces\n          // needed to reach such sequence, which would brings again this loop\n          // to the fast path, prepend the difference before a sequence,\n          // and move only the future list index forward, so that aStart\n          // and bStart will be aligned again, hence on the fast path.\n          // An example considering aStart and bStart are both 0:\n          // a: [1, 2, 3, 4]\n          // b: [7, 1, 2, 3, 6]\n          // this would place 7 before 1 and, from that time on, 1, 2, and 3\n          // will be processed at zero cost\n          if (sequence > (index - bStart)) {\n            const node = get(a[aStart], 0);\n            while (bStart < index)\n              parentNode.insertBefore(get(b[bStart++], 1), node);\n          }\n          // if the effort wasn't good enough, fallback to a replace,\n          // moving both source and target indexes forward, hoping that some\n          // similar node will be found later on, to go back to the fast path\n          else {\n            parentNode.replaceChild(\n              get(b[bStart++], 1),\n              get(a[aStart++], -1)\n            );\n          }\n        }\n        // otherwise move the source forward, 'cause there's nothing to do\n        else\n          aStart++;\n      }\n      // this node has no meaning in the future list, so it's more than safe\n      // to remove it, and check the next live node out instead, meaning\n      // that only the live list index should be forwarded\n      else\n        parentNode.removeChild(get(a[aStart++], -1));\n    }\n  }\n  return b;\n};\n","import {WeakMapSet} from '@webreflection/mapset';\nimport instrument from '@webreflection/uparser';\nimport {persistent} from '@webreflection/uwire';\n\nimport {handlers} from './handlers.js';\nimport {isArray, indexOf, createContent, createTreeWalker, importNode} from './utils.js';\n\n// from a fragment container, create an array of indexes\n// related to its child nodes, so that it's possible\n// to retrieve later on exact node via reducePath\nconst createPath = node => {\n  const path = [];\n  let {parentNode} = node;\n  while (parentNode) {\n    path.push(indexOf.call(parentNode.childNodes, node));\n    node = parentNode;\n    ({parentNode} = node);\n  }\n  return path;\n};\n\n// the prefix is used to identify either comments, attributes, or nodes\n// that contain the related unique id. In the attribute cases\n// isµX=\"attribute-name\" will be used to map current X update to that\n// attribute name, while comments will be like <!--isµX-->, to map\n// the update to that specific comment node, hence its parent.\n// style and textarea will have <!--isµX--> text content, and are handled\n// directly through text-only updates.\nconst prefix = 'isµ';\n\n// Template Literals are unique per scope and static, meaning a template\n// should be parsed once, and once only, as it will always represent the same\n// content, within the exact same amount of updates each time.\n// This cache relates each template to its unique content and updates.\nconst cache = new WeakMapSet;\n\n// a RegExp that helps checking nodes that cannot contain comments\nconst textOnly = /^(?:textarea|script|style|title|plaintext|xmp)$/;\n\nexport const createCache = () => ({\n  stack: [],    // each template gets a stack for each interpolation \"hole\"\n\n  entry: null,  // each entry contains details, such as:\n                //  * the template that is representing\n                //  * the type of node it represents (html or svg)\n                //  * the content fragment with all nodes\n                //  * the list of updates per each node (template holes)\n                //  * the \"wired\" node or fragment that will get updates\n                // if the template or type are different from the previous one\n                // the entry gets re-created each time\n\n  wire: null    // each rendered node represent some wired content and\n                // this reference to the latest one. If different, the node\n                // will be cleaned up and the new \"wire\" will be appended\n});\n\n// the entry stored in the rendered node cache, and per each \"hole\"\nconst createEntry = (type, template) => {\n  const {content, updates} = mapUpdates(type, template);\n  return {type, template, content, updates, wire: null};\n};\n\n// a template is instrumented to be able to retrieve where updates are needed.\n// Each unique template becomes a fragment, cloned once per each other\n// operation based on the same template, i.e. data => html`<p>${data}</p>`\nconst mapTemplate = (type, template) => {\n  const svg = type === 'svg';\n  const text = instrument(template, prefix, svg);\n  const content = createContent(text, svg);\n  // once instrumented and reproduced as fragment, it's crawled\n  // to find out where each update is in the fragment tree\n  const tw = createTreeWalker(content, 1 | 128);\n  const nodes = [];\n  const length = template.length - 1;\n  let i = 0;\n  // updates are searched via unique names, linearly increased across the tree\n  // <div isµ0=\"attr\" isµ1=\"other\"><!--isµ2--><style><!--isµ3--</style></div>\n  let search = `${prefix}${i}`;\n  while (i < length) {\n    const node = tw.nextNode();\n    // if not all updates are bound but there's nothing else to crawl\n    // it means that there is something wrong with the template.\n    if (!node)\n      throw `bad template: ${text}`;\n    // if the current node is a comment, and it contains isµX\n    // it means the update should take care of any content\n    if (node.nodeType === 8) {\n      // The only comments to be considered are those\n      // which content is exactly the same as the searched one.\n      if (node.data === search) {\n        nodes.push({type: 'node', path: createPath(node)});\n        search = `${prefix}${++i}`;\n      }\n    }\n    else {\n      // if the node is not a comment, loop through all its attributes\n      // named isµX and relate attribute updates to this node and the\n      // attribute name, retrieved through node.getAttribute(\"isµX\")\n      // the isµX attribute will be removed as irrelevant for the layout\n      // let svg = -1;\n      while (node.hasAttribute(search)) {\n        nodes.push({\n          type: 'attr',\n          path: createPath(node),\n          name: node.getAttribute(search)\n        });\n        node.removeAttribute(search);\n        search = `${prefix}${++i}`;\n      }\n      // if the node was a style, textarea, or others, check its content\n      // and if it is <!--isµX--> then update tex-only this node\n      if (\n        textOnly.test(node.localName) &&\n        node.textContent.trim() === `<!--${search}-->`\n      ){\n        node.textContent = '';\n        nodes.push({type: 'text', path: createPath(node)});\n        search = `${prefix}${++i}`;\n      }\n    }\n  }\n  // once all nodes to update, or their attributes, are known, the content\n  // will be cloned in the future to represent the template, and all updates\n  // related to such content retrieved right away without needing to re-crawl\n  // the exact same template, and its content, more than once.\n  return {content, nodes};\n};\n\n// if a template is unknown, perform the previous mapping, otherwise grab\n// its details such as the fragment with all nodes, and updates info.\nconst mapUpdates = (type, template) => {\n  const {content, nodes} = (\n    cache.get(template) ||\n    cache.set(template, mapTemplate(type, template))\n  );\n  // clone deeply the fragment\n  const fragment = importNode(content, true);\n  // and relate an update handler per each node that needs one\n  const updates = nodes.map(handlers, fragment);\n  // return the fragment and all updates to use within its nodes\n  return {content: fragment, updates};\n};\n\n// as html and svg can be nested calls, but no parent node is known\n// until rendered somewhere, the unroll operation is needed to\n// discover what to do with each interpolation, which will result\n// into an update operation.\nexport const unroll = (info, {type, template, values}) => {\n  // interpolations can contain holes and arrays, so these need\n  // to be recursively discovered\n  const length = unrollValues(info, values);\n  let {entry} = info;\n  // if the cache entry is either null or different from the template\n  // and the type this unroll should resolve, create a new entry\n  // assigning a new content fragment and the list of updates.\n  if (!entry || (entry.template !== template || entry.type !== type))\n    info.entry = (entry = createEntry(type, template));\n  const {content, updates, wire} = entry;\n  // even if the fragment and its nodes is not live yet,\n  // it is already possible to update via interpolations values.\n  for (let i = 0; i < length; i++)\n    updates[i](values[i]);\n  // if the entry was new, or representing a different template or type,\n  // create a new persistent entity to use during diffing.\n  // This is simply a DOM node, when the template has a single container,\n  // as in `<p></p>`, or a \"wire\" in `<p></p><p></p>` and similar cases.\n  return wire || (entry.wire = persistent(content));\n};\n\n// the stack retains, per each interpolation value, the cache\n// related to each interpolation value, or null, if the render\n// was conditional and the value is not special (Array or Hole)\nconst unrollValues = ({stack}, values) => {\n  const {length} = values;\n  for (let i = 0; i < length; i++) {\n    const hole = values[i];\n    // each Hole gets unrolled and re-assigned as value\n    // so that domdiff will deal with a node/wire, not with a hole\n    if (hole instanceof Hole)\n      values[i] = unroll(\n        stack[i] || (stack[i] = createCache()),\n        hole\n      );\n    // arrays are recursively resolved so that each entry will contain\n    // also a DOM node or a wire, hence it can be diffed if/when needed\n    else if (isArray(hole))\n      unrollValues(stack[i] || (stack[i] = createCache()), hole);\n    // if the value is nothing special, the stack doesn't need to retain data\n    // this is useful also to cleanup previously retained data, if the value\n    // was a Hole, or an Array, but not anymore, i.e.:\n    // const update = content => html`<div>${content}</div>`;\n    // update(listOfItems); update(null); update(html`hole`)\n    else\n      stack[i] = null;\n  }\n  if (length < stack.length)\n    stack.splice(length);\n  return length;\n};\n\n/**\n * Holds all details wrappers needed to render the content further on.\n * @constructor\n * @param {string} type The hole type, either `html` or `svg`.\n * @param {string[]} template The template literals used to the define the content.\n * @param {Array} values Zero, one, or more interpolated values to render.\n */\nexport class Hole {\n  constructor(type, template, values) {\n    this.type = type;\n    this.template = template;\n    this.values = values;\n  }\n};\n","import {MapSet, WeakMapSet} from '@webreflection/mapset';\n\nimport {Hole, createCache, unroll} from './rabbit.js';\n\n// both `html` and `svg` template literal tags are polluted\n// with a `for(ref[, id])` and a `node` tag too\nconst tag = type => {\n  // both `html` and `svg` tags have their own cache\n  const keyed = new WeakMapSet;\n  // keyed operations always re-use the same cache and unroll\n  // the template and its interpolations right away\n  const fixed = cache => (template, ...values) => unroll(\n    cache,\n    {type, template, values}\n  );\n  return Object.assign(\n    // non keyed operations are recognized as instance of Hole\n    // during the \"unroll\", recursively resolved and updated\n    (template, ...values) => new Hole(type, template, values),\n    {\n      // keyed operations need a reference object, usually the parent node\n      // which is showing keyed results, and optionally a unique id per each\n      // related node, handy with JSON results and mutable list of objects\n      // that usually carry a unique identifier\n      for(ref, id) {\n        const memo = keyed.get(ref) || keyed.set(ref, new MapSet);\n        return memo.get(id) || memo.set(id, fixed(createCache()));\n      },\n      // it is possible to create one-off content out of the box via node tag\n      // this might return the single created node, or a fragment with all\n      // nodes present at the root level and, of course, their child nodes\n      node: (template, ...values) => unroll(createCache(), new Hole(type, template, values)).valueOf()\n    }\n  );\n};\n\n// each rendered node gets its own cache\nconst cache = new WeakMapSet;\n\n// rendering means understanding what `html` or `svg` tags returned\n// and it relates a specific node to its own unique cache.\n// Each time the content to render changes, the node is cleaned up\n// and the new new content is appended, and if such content is a Hole\n// then it's \"unrolled\" to resolve all its inner nodes.\nconst render = (where, what) => {\n  const hole = typeof what === 'function' ? what() : what;\n  const info = cache.get(where) || cache.set(where, createCache());\n  const wire = hole instanceof Hole ? unroll(info, hole) : hole;\n  if (wire !== info.wire) {\n    info.wire = wire;\n    // valueOf() simply returns the node itself, but in case it was a \"wire\"\n    // it will eventually re-append all nodes to its fragment so that such\n    // fragment can be re-appended many times in a meaningful way\n    // (wires are basically persistent fragments facades with special behavior)\n    where.replaceChildren(wire.valueOf());\n  }\n  return where;\n};\n\nconst html = tag('html');\nconst svg = tag('svg');\n\nexport {Hole, render, html, svg};\n","import { html, render as uhtmlRenderer } from 'uhtml'\n\nfunction renderer (what, where) {\n  uhtmlRenderer(where, what)\n}\n\nexport { html, renderer }\n"],"names":["MapSet","Map","set","key","value","super","WeakMapSet","WeakMap","empty","elements","attributes","holes","diffable","node","operation","nodeType","firstChild","lastChild","range","document","createRange","setStartAfter","setEndAfter","deleteContents","remove","valueOf","isArray","Array","getValue","event","name","oldValue","lower","type","slice","toLowerCase","newValue","info","removeEventListener","addEventListener","prototype","indexOf","createDocumentFragment","createElement","createElementNS","createTextNode","createTreeWalker","importNode","Proxy","get","_","method","bind","xml","createContent","text","svg","innerHTML","content","append","childNodes","createSVG","html","template","createHTML","reducePath","i","diff","comment","oldNodes","newNodes","parentNode","a","b","before","bLength","length","aEnd","bEnd","aStart","bStart","map","insertBefore","has","removeChild","nextSibling","index","sequence","replaceChild","udomdiff","handleAttribute","setAttribute","removeAttribute","boolean","dataset","values","data","setter","current","ref","aria","orphan","attributeNode","createAttributeNS","removeAttributeNode","setAttributeNodeNS","attribute","handlers","options","path","reduceRight","this","nodes","anyContent","String","handleAnything","textContent","createPath","push","call","cache","textOnly","mapTemplate","prefix","join","trim","replace","attrs","selfClosing","ml","trimEnd","test","hole","instrument","tw","search","nextNode","hasAttribute","getAttribute","localName","mapUpdates","fragment","updates","unroll","unrollValues","entry","wire","createEntry","ELEMENT_NODE","persistent","stack","Hole","splice","constructor","tag","keyed","Object","assign","for","id","memo","fixed","renderer","what","where","replaceChildren","uhtmlRenderer"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}